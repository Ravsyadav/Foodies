{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/Ravs yadav/Documents/zomato/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nmodule.exports = function (string) {\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  options = _objectSpread({\n    indent: ' ',\n    includeEmptyLines: false\n  }, options);\n\n  if (typeof string !== 'string') {\n    throw new TypeError(\"Expected `input` to be a `string`, got `\".concat(typeof string, \"`\"));\n  }\n\n  if (typeof count !== 'number') {\n    throw new TypeError(\"Expected `count` to be a `number`, got `\".concat(typeof count, \"`\"));\n  }\n\n  if (typeof options.indent !== 'string') {\n    throw new TypeError(\"Expected `options.indent` to be a `string`, got `\".concat(typeof options.indent, \"`\"));\n  }\n\n  if (count === 0) {\n    return string;\n  }\n\n  var regex = options.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n  return string.replace(regex, options.indent.repeat(count));\n};","map":{"version":3,"sources":["C:/Users/Ravs yadav/Documents/zomato/node_modules/indent-string/index.js"],"names":["module","exports","string","count","options","indent","includeEmptyLines","TypeError","regex","replace","repeat"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAACC,MAAD,EAAgC;AAAA,MAAvBC,KAAuB,uEAAf,CAAe;AAAA,MAAZC,OAAY;AAChDA,EAAAA,OAAO;AACNC,IAAAA,MAAM,EAAE,GADF;AAENC,IAAAA,iBAAiB,EAAE;AAFb,KAGHF,OAHG,CAAP;;AAMA,MAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAM,IAAIK,SAAJ,mDAC2C,OAAOL,MADlD,OAAN;AAGA;;AAED,MAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC9B,UAAM,IAAII,SAAJ,mDAC2C,OAAOJ,KADlD,OAAN;AAGA;;AAED,MAAI,OAAOC,OAAO,CAACC,MAAf,KAA0B,QAA9B,EAAwC;AACvC,UAAM,IAAIE,SAAJ,4DACoD,OAAOH,OAAO,CAACC,MADnE,OAAN;AAGA;;AAED,MAAIF,KAAK,KAAK,CAAd,EAAiB;AAChB,WAAOD,MAAP;AACA;;AAED,MAAMM,KAAK,GAAGJ,OAAO,CAACE,iBAAR,GAA4B,KAA5B,GAAoC,aAAlD;AAEA,SAAOJ,MAAM,CAACO,OAAP,CAAeD,KAAf,EAAsBJ,OAAO,CAACC,MAAR,CAAeK,MAAf,CAAsBP,KAAtB,CAAtB,CAAP;AACA,CAhCD","sourcesContent":["'use strict';\n\nmodule.exports = (string, count = 1, options) => {\n\toptions = {\n\t\tindent: ' ',\n\t\tincludeEmptyLines: false,\n\t\t...options\n\t};\n\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``\n\t\t);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``\n\t\t);\n\t}\n\n\tif (typeof options.indent !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``\n\t\t);\n\t}\n\n\tif (count === 0) {\n\t\treturn string;\n\t}\n\n\tconst regex = options.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n\treturn string.replace(regex, options.indent.repeat(count));\n};\n"]},"metadata":{},"sourceType":"script"}