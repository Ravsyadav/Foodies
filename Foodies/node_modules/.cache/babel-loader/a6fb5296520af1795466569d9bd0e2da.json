{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveClass = toHaveClass;\n\nvar _utils = require(\"./utils\");\n\nfunction getExpectedClassNamesAndOptions(params) {\n  var lastParam = params.pop();\n  var expectedClassNames, options;\n\n  if (typeof lastParam === 'object') {\n    expectedClassNames = params;\n    options = lastParam;\n  } else {\n    expectedClassNames = params.concat(lastParam);\n    options = {\n      exact: false\n    };\n  }\n\n  return {\n    expectedClassNames: expectedClassNames,\n    options: options\n  };\n}\n\nfunction splitClassNames(str) {\n  if (!str) {\n    return [];\n  }\n\n  return str.split(/\\s+/).filter(function (s) {\n    return s.length > 0;\n  });\n}\n\nfunction isSubset(subset, superset) {\n  return subset.every(function (item) {\n    return superset.includes(item);\n  });\n}\n\nfunction toHaveClass(htmlElement) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveClass, this);\n\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  var _getExpectedClassName = getExpectedClassNamesAndOptions(params),\n      expectedClassNames = _getExpectedClassName.expectedClassNames,\n      options = _getExpectedClassName.options;\n\n  var received = splitClassNames(htmlElement.getAttribute('class'));\n  var expected = expectedClassNames.reduce(function (acc, className) {\n    return acc.concat(splitClassNames(className));\n  }, []);\n\n  if (options.exact) {\n    return {\n      pass: isSubset(expected, received) && expected.length === received.length,\n      message: function message() {\n        var to = _this.isNot ? 'not to' : 'to';\n        return (0, _utils.getMessage)(_this, \"Expected the element \".concat(to, \" have EXACTLY defined classes\"), expected.join(' '), 'Received', received.join(' '));\n      }\n    };\n  }\n\n  return expected.length > 0 ? {\n    pass: isSubset(expected, received),\n    message: function message() {\n      var to = _this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(_this, _this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toHaveClass\"), 'element', _this.utils.printExpected(expected.join(' '))), \"Expected the element \".concat(to, \" have class\"), expected.join(' '), 'Received', received.join(' '));\n    }\n  } : {\n    pass: this.isNot ? received.length > 0 : false,\n    message: function message() {\n      return _this.isNot ? (0, _utils.getMessage)(_this, _this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [_this.utils.matcherHint(\".toHaveClass\", 'element'), 'At least one expected class must be provided.'].join('\\n');\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Ravs yadav/Documents/zomato/node_modules/@testing-library/jest-dom/dist/to-have-class.js"],"names":["Object","defineProperty","exports","value","toHaveClass","_utils","require","getExpectedClassNamesAndOptions","params","lastParam","pop","expectedClassNames","options","concat","exact","splitClassNames","str","split","filter","s","length","isSubset","subset","superset","every","item","includes","htmlElement","checkHtmlElement","received","getAttribute","expected","reduce","acc","className","pass","message","to","isNot","getMessage","join","utils","matcherHint","printExpected"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveClass = toHaveClass;\n\nvar _utils = require(\"./utils\");\n\nfunction getExpectedClassNamesAndOptions(params) {\n  const lastParam = params.pop();\n  let expectedClassNames, options;\n\n  if (typeof lastParam === 'object') {\n    expectedClassNames = params;\n    options = lastParam;\n  } else {\n    expectedClassNames = params.concat(lastParam);\n    options = {\n      exact: false\n    };\n  }\n\n  return {\n    expectedClassNames,\n    options\n  };\n}\n\nfunction splitClassNames(str) {\n  if (!str) {\n    return [];\n  }\n\n  return str.split(/\\s+/).filter(s => s.length > 0);\n}\n\nfunction isSubset(subset, superset) {\n  return subset.every(item => superset.includes(item));\n}\n\nfunction toHaveClass(htmlElement, ...params) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveClass, this);\n  const {\n    expectedClassNames,\n    options\n  } = getExpectedClassNamesAndOptions(params);\n  const received = splitClassNames(htmlElement.getAttribute('class'));\n  const expected = expectedClassNames.reduce((acc, className) => acc.concat(splitClassNames(className)), []);\n\n  if (options.exact) {\n    return {\n      pass: isSubset(expected, received) && expected.length === received.length,\n      message: () => {\n        const to = this.isNot ? 'not to' : 'to';\n        return (0, _utils.getMessage)(this, `Expected the element ${to} have EXACTLY defined classes`, expected.join(' '), 'Received', received.join(' '));\n      }\n    };\n  }\n\n  return expected.length > 0 ? {\n    pass: isSubset(expected, received),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));\n    }\n  } : {\n    pass: this.isNot ? received.length > 0 : false,\n    message: () => this.isNot ? (0, _utils.getMessage)(this, this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [this.utils.matcherHint(`.toHaveClass`, 'element'), 'At least one expected class must be provided.'].join('\\n')\n  };\n}"]},"metadata":{},"sourceType":"script"}