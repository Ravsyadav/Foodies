{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Ravs yadav/Documents/zomato/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"C:/Users/Ravs yadav/Documents/zomato/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"C:/Users/Ravs yadav/Documents/zomato/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveFormValues = toHaveFormValues;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\n\nvar _uniq = _interopRequireDefault(require(\"lodash/uniq\"));\n\nvar _css = _interopRequireDefault(require(\"css.escape\"));\n\nvar _utils = require(\"./utils\"); // Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\n\n\nfunction getMultiElementValue(elements) {\n  var types = (0, _uniq.default)(elements.map(function (element) {\n    return element.type;\n  }));\n\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n\n  switch (types[0]) {\n    case 'radio':\n      {\n        var theChosenOne = elements.find(function (radio) {\n          return radio.checked;\n        });\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n\n    case 'checkbox':\n      return elements.filter(function (checkbox) {\n        return checkbox.checked;\n      }).map(function (checkbox) {\n        return checkbox.value;\n      });\n\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(function (element) {\n        return element.value;\n      });\n  }\n}\n\nfunction getFormValue(container, name) {\n  var elements = _toConsumableArray(container.querySelectorAll(\"[name=\\\"\".concat((0, _css.default)(name), \"\\\"]\")));\n  /* istanbul ignore if */\n\n\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n\n  switch (elements.length) {\n    case 1:\n      return (0, _utils.getSingleElementValue)(elements[0]);\n\n    default:\n      return getMultiElementValue(elements);\n  }\n} // Strips the `[]` suffix off a form value name\n\n\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\n\nfunction getAllFormValues(container) {\n  var names = Array.from(container.elements).map(function (element) {\n    return element.name;\n  });\n  return names.reduce(function (obj, name) {\n    return (0, _extends2.default)({}, obj, _defineProperty({}, getPureName(name), getFormValue(container, name)));\n  }, {});\n}\n\nfunction toHaveFormValues(formElement, expectedValues) {\n  var _this = this;\n\n  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);\n\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n\n  var formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          name = _ref3[0],\n          expectedValue = _ref3[1];\n\n      return (0, _isEqualWith.default)(formValues[name], expectedValue, _utils.compareArraysAsSet);\n    }),\n    message: function message() {\n      var to = _this.isNot ? 'not to' : 'to';\n      var matcher = \"\".concat(_this.isNot ? '.not' : '', \".toHaveFormValues\");\n      var commonKeyValues = Object.keys(formValues).filter(function (key) {\n        return expectedValues.hasOwnProperty(key);\n      }).reduce(function (obj, key) {\n        return (0, _extends2.default)({}, obj, _defineProperty({}, key, formValues[key]));\n      }, {});\n      return [_this.utils.matcherHint(matcher, 'element', ''), \"Expected the element \".concat(to, \" have form values\"), _this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Ravs yadav/Documents/zomato/node_modules/@testing-library/jest-dom/dist/to-have-form-values.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","toHaveFormValues","_extends2","_isEqualWith","_uniq","_css","_utils","getMultiElementValue","elements","types","default","map","element","type","length","Error","theChosenOne","find","radio","checked","undefined","filter","checkbox","getFormValue","container","name","querySelectorAll","getSingleElementValue","getPureName","test","slice","getAllFormValues","names","Array","from","reduce","obj","formElement","expectedValues","checkHtmlElement","formValues","pass","entries","every","expectedValue","compareArraysAsSet","message","to","isNot","matcher","commonKeyValues","keys","key","hasOwnProperty","utils","matcherHint","diff","join"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveFormValues = toHaveFormValues;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\n\nvar _uniq = _interopRequireDefault(require(\"lodash/uniq\"));\n\nvar _css = _interopRequireDefault(require(\"css.escape\"));\n\nvar _utils = require(\"./utils\");\n\n// Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\nfunction getMultiElementValue(elements) {\n  const types = (0, _uniq.default)(elements.map(element => element.type));\n\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n\n  switch (types[0]) {\n    case 'radio':\n      {\n        const theChosenOne = elements.find(radio => radio.checked);\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n\n    case 'checkbox':\n      return elements.filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);\n\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(element => element.value);\n  }\n}\n\nfunction getFormValue(container, name) {\n  const elements = [...container.querySelectorAll(`[name=\"${(0, _css.default)(name)}\"]`)];\n  /* istanbul ignore if */\n\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n\n  switch (elements.length) {\n    case 1:\n      return (0, _utils.getSingleElementValue)(elements[0]);\n\n    default:\n      return getMultiElementValue(elements);\n  }\n} // Strips the `[]` suffix off a form value name\n\n\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\n\nfunction getAllFormValues(container) {\n  const names = Array.from(container.elements).map(element => element.name);\n  return names.reduce((obj, name) => (0, _extends2.default)({}, obj, {\n    [getPureName(name)]: getFormValue(container, name)\n  }), {});\n}\n\nfunction toHaveFormValues(formElement, expectedValues) {\n  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);\n\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n\n  const formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(([name, expectedValue]) => (0, _isEqualWith.default)(formValues[name], expectedValue, _utils.compareArraysAsSet)),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveFormValues`;\n      const commonKeyValues = Object.keys(formValues).filter(key => expectedValues.hasOwnProperty(key)).reduce((obj, key) => (0, _extends2.default)({}, obj, {\n        [key]: formValues[key]\n      }), {});\n      return [this.utils.matcherHint(matcher, 'element', ''), `Expected the element ${to} have form values`, this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}